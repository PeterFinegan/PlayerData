scraped_page <- read_html(page)
#Start date of players loan
LoanStart <- scraped_page %>%html_nodes("td:nth-child(5)") %>% html_text() #%>% as.character()
#End date of players loan
LoanEnd <- scraped_page %>%html_nodes("td:nth-child(6)") %>% html_text() #%>% as.character()
#Name of players
PlayerNamesChels <- scraped_page %>%html_nodes(".spielprofil_tooltip") %>% html_text() #%>% as.character()
#Age
Age <- scraped_page %>%html_nodes("td.zentriert:nth-child(2)") %>% html_text() #%>% as.character()
#Name of club
PlayerLoanClub <- scraped_page %>%html_nodes(".hauptlink .vereinprofil_tooltip") %>% html_text() #%>% as.character()
#image that shows the country that the club is from
LoanClubCountry <- scraped_page %>%html_nodes(".inline-table img.flaggenrahmen")
#Number of appearences made by player
PlayerAppearences <- scraped_page %>%html_nodes("td:nth-child(8)") %>% html_text() #%>% as.character()
#Market Value at the end of loan
MarketValue <- scraped_page %>% html_nodes(".rechts.hauptlink") %>% html_text() #%>% as.character()
#Market value increase/decrease
MarketFluctuation <- scraped_page %>% html_nodes(".hauptlink .icons_sprite") %>% html_text()
#taking the alt text of the Country image html attr.
#https://stackoverflow.com/questions/30693476/web-scraping-of-image
clubCountry <- html_attr(LoanClubCountry, "alt")
#Convert loan dates to date format
#https://stackoverflow.com/questions/53782218/convert-string-dates-to-date-in-r
LoanStart <- format(mdy(LoanStart),"%d/%m/%Y")
LoanEnd <- format(mdy(LoanEnd),"%d/%m/%Y")
#assiging dataframe
ChelseaU23_16 <- data.frame(LoanStart, LoanEnd, PlayerNamesChels, Age, PlayerLoanClub, clubCountry, PlayerAppearences, MarketValue, MarketFluctuation, stringsAsFactors=FALSE)
#converts the "-" sign to a 0
#https://stackoverflow.com/questions/53787049/converting-to-a-0-in-r
ChelseaU23_16$PlayerAppearences[ChelseaU23_16$PlayerAppearences == "-"] <- "0"
ChelseaU23_16$PlayerAppearences <- as.numeric(ChelseaU23_16$PlayerAppearences)
ChelseaU23_16$MarketValue[ChelseaU23_16$MarketValue == "-"] <- "0"
ChelseaU23_16$MarketValue <- as.character(ChelseaU23_16$MarketValue)
#save to csv
write.csv(ChelseaU23_16, "C:/Users/peter/Desktop/PlayerData/15-16/Under23s_15-16.csv")
write.csv(rbind(ChelseaFirstTeam_16, ChelseaFirstTeam_17, ChelseaFirstTeam_18, ChelseaFirstTeam_19, ChelseaU23_19, ChelseaU23s_18, ChelseaU23s_17, ChelseaU23_16), "C:/Users/peter/Desktop/PlayerData/AllPlayers.csv")
write.csv(rbind(ChelseaFirstTeam_16, ChelseaU23_16), "C:/Users/peter/Desktop/PlayerData/15-16/AllPlayers_15-16.csv")
require(rvest)
library(lubridate)
# Web Scraping tutorial
# https://fcrstats.wordpress.com/2018/02/08/introduction-to-scraping-data-from-transfermarkt/
#taking the html page
page <- "https://www.transfermarkt.com/chelsea-fc/leihspielerhistorie/verein/631/plus/1?saison_id=2015&leihe=ist"
#assinging the page
scraped_page <- read_html(page)
#Start date of players loan
LoanStart <- scraped_page %>%html_nodes("td:nth-child(5)") %>% html_text() #%>% as.character()
#End date of players loan
LoanEnd <- scraped_page %>%html_nodes("td:nth-child(6)") %>% html_text() #%>% as.character()
#Name of players
PlayerNamesChels <- scraped_page %>%html_nodes(".spielprofil_tooltip") %>% html_text() #%>% as.character()
#Age
Age <- scraped_page %>%html_nodes("td.zentriert:nth-child(2)") %>% html_text() #%>% as.character()
#Name of club
PlayerLoanClub <- scraped_page %>%html_nodes(".hauptlink .vereinprofil_tooltip") %>% html_text() #%>% as.character()
#image that shows the country that the club is from
LoanClubCountry <- scraped_page %>%html_nodes(".inline-table img.flaggenrahmen")
#Number of appearences made by player
PlayerAppearences <- scraped_page %>%html_nodes("td:nth-child(8)") %>% html_text() #%>% as.character()
#Market Value at the end of loan
MarketValue <- scraped_page %>% html_nodes(".rechts.hauptlink") %>% html_text() #%>% as.character()
#Market value increase/decrease
MarketFluctuation <- scraped_page %>% html_nodes(".hauptlink .icons_sprite") %>% html_text()
#taking the alt text of the Country image html attr.
#https://stackoverflow.com/questions/30693476/web-scraping-of-image
clubCountry <- html_attr(LoanClubCountry, "alt")
#Convert loan dates to date format
#https://stackoverflow.com/questions/53782218/convert-string-dates-to-date-in-r
LoanStart <- format(mdy(LoanStart),"%d/%m/%Y")
LoanEnd <- format(mdy(LoanEnd),"%d/%m/%Y")
#assiging dataframe
ChelseaFirstTeam_16 <- data.frame(LoanStart, LoanEnd, PlayerNamesChels, Age, PlayerLoanClub, clubCountry, PlayerAppearences, MarketValue, MarketFluctuation, stringsAsFactors=FALSE)
#converts the "-" sign to a 0
#https://stackoverflow.com/questions/53787049/converting-to-a-0-in-r
ChelseaFirstTeam_16$PlayerAppearences[ChelseaFirstTeam_16$PlayerAppearences == "-"] <- "0"
ChelseaFirstTeam_16$PlayerAppearences <- as.numeric(ChelseaFirstTeam_16$PlayerAppearences)
ChelseaFirstTeam_16$MarketValue[ChelseaFirstTeam_16$MarketValue == "-"] <- "0"
ChelseaFirstTeam_16$MarketValue <- as.character(ChelseaFirstTeam_16$MarketValue)
#save to csv
write.csv(ChelseaFirstTeam_16, "C:/Users/peter/Desktop/PlayerData/15-16/FirstTeam_15-16.csv")
write.csv(rbind(ChelseaFirstTeam_16, ChelseaFirstTeam_17, ChelseaFirstTeam_18, ChelseaFirstTeam_19, ChelseaU23_19, ChelseaU23s_18, ChelseaU23s_17), "C:/Users/peter/Desktop/PlayerData/AllPlayers.csv")
write.csv(rbind(ChelseaFirstTeam_16), "C:/Users/peter/Desktop/PlayerData/15-16/AllPlayers_15-16.csv")
require(rvest)
library(lubridate)
# Web Scraping tutorial
# https://fcrstats.wordpress.com/2018/02/08/introduction-to-scraping-data-from-transfermarkt/
#taking the html page
page <- "https://www.transfermarkt.com/chelsea-fc-u23/leihspielerhistorie/verein/9250/plus/1?saison_id=2014&leihe=ist"
#assinging the page
scraped_page <- read_html(page)
#Start date of players loan
LoanStart <- scraped_page %>%html_nodes("td:nth-child(5)") %>% html_text() #%>% as.character()
#End date of players loan
LoanEnd <- scraped_page %>%html_nodes("td:nth-child(6)") %>% html_text() #%>% as.character()
#Name of players
PlayerNamesChels <- scraped_page %>%html_nodes(".spielprofil_tooltip") %>% html_text() #%>% as.character()
#Age
Age <- scraped_page %>%html_nodes("td.zentriert:nth-child(2)") %>% html_text() #%>% as.character()
#Name of club
PlayerLoanClub <- scraped_page %>%html_nodes(".hauptlink .vereinprofil_tooltip") %>% html_text() #%>% as.character()
#image that shows the country that the club is from
LoanClubCountry <- scraped_page %>%html_nodes(".inline-table img.flaggenrahmen")
#Number of appearences made by player
PlayerAppearences <- scraped_page %>%html_nodes("td:nth-child(8)") %>% html_text() #%>% as.character()
#Market Value at the end of loan
MarketValue <- scraped_page %>% html_nodes(".rechts.hauptlink") %>% html_text() #%>% as.character()
#Market value increase/decrease
MarketFluctuation <- scraped_page %>% html_nodes(".hauptlink .icons_sprite") %>% html_text()
#taking the alt text of the Country image html attr.
#https://stackoverflow.com/questions/30693476/web-scraping-of-image
clubCountry <- html_attr(LoanClubCountry, "alt")
#Convert loan dates to date format
#https://stackoverflow.com/questions/53782218/convert-string-dates-to-date-in-r
LoanStart <- format(mdy(LoanStart),"%d/%m/%Y")
LoanEnd <- format(mdy(LoanEnd),"%d/%m/%Y")
#assiging dataframe
ChelseaU23_15 <- data.frame(LoanStart, LoanEnd, PlayerNamesChels, Age, PlayerLoanClub, clubCountry, PlayerAppearences, MarketValue, MarketFluctuation, stringsAsFactors=FALSE)
#converts the "-" sign to a 0
#https://stackoverflow.com/questions/53787049/converting-to-a-0-in-r
ChelseaU23_15$PlayerAppearences[ChelseaU23_15$PlayerAppearences == "-"] <- "0"
ChelseaU23_15$PlayerAppearences <- as.numeric(ChelseaU23_15$PlayerAppearences)
ChelseaU23_15$MarketValue[ChelseaU23_15$MarketValue == "-"] <- "0"
ChelseaU23_15$MarketValue <- as.character(ChelseaU23_15$MarketValue)
#save to csv
write.csv(ChelseaU23_15, "C:/Users/peter/Desktop/PlayerData/14-15/Under23s_14-15.csv")
write.csv(rbind(ChelseaFirstTeam_16, ChelseaFirstTeam_17, ChelseaFirstTeam_18, ChelseaFirstTeam_19, ChelseaU23_19, ChelseaU23s_18, ChelseaU23s_17, ChelseaU23_16, ChelseaU23_15), "C:/Users/peter/Desktop/PlayerData/AllPlayers.csv")
write.csv(rbind(ChelseaU23_15), "C:/Users/peter/Desktop/PlayerData/14-15/AllPlayers_14-15.csv")
require(rvest)
library(lubridate)
# Web Scraping tutorial
# https://fcrstats.wordpress.com/2018/02/08/introduction-to-scraping-data-from-transfermarkt/
#taking the html page
page <- "https://www.transfermarkt.com/chelsea-fc/leihspielerhistorie/verein/631/plus/1?saison_id=2014&leihe=ist"
#assinging the page
scraped_page <- read_html(page)
#Start date of players loan
LoanStart <- scraped_page %>%html_nodes("td:nth-child(5)") %>% html_text() #%>% as.character()
#End date of players loan
LoanEnd <- scraped_page %>%html_nodes("td:nth-child(6)") %>% html_text() #%>% as.character()
#Name of players
PlayerNamesChels <- scraped_page %>%html_nodes(".spielprofil_tooltip") %>% html_text() #%>% as.character()
#Age
Age <- scraped_page %>%html_nodes("td.zentriert:nth-child(2)") %>% html_text() #%>% as.character()
#Name of club
PlayerLoanClub <- scraped_page %>%html_nodes(".hauptlink .vereinprofil_tooltip") %>% html_text() #%>% as.character()
#image that shows the country that the club is from
LoanClubCountry <- scraped_page %>%html_nodes(".inline-table img.flaggenrahmen")
#Number of appearences made by player
PlayerAppearences <- scraped_page %>%html_nodes("td:nth-child(8)") %>% html_text() #%>% as.character()
#Market Value at the end of loan
MarketValue <- scraped_page %>% html_nodes(".rechts.hauptlink") %>% html_text() #%>% as.character()
#Market value increase/decrease
MarketFluctuation <- scraped_page %>% html_nodes(".hauptlink .icons_sprite") %>% html_text()
#taking the alt text of the Country image html attr.
#https://stackoverflow.com/questions/30693476/web-scraping-of-image
clubCountry <- html_attr(LoanClubCountry, "alt")
#Convert loan dates to date format
#https://stackoverflow.com/questions/53782218/convert-string-dates-to-date-in-r
LoanStart <- format(mdy(LoanStart),"%d/%m/%Y")
LoanEnd <- format(mdy(LoanEnd),"%d/%m/%Y")
#assiging dataframe
ChelseaFirstTeam_15 <- data.frame(LoanStart, LoanEnd, PlayerNamesChels, Age, PlayerLoanClub, clubCountry, PlayerAppearences, MarketValue, MarketFluctuation, stringsAsFactors=FALSE)
#converts the "-" sign to a 0
#https://stackoverflow.com/questions/53787049/converting-to-a-0-in-r
ChelseaFirstTeam_15$PlayerAppearences[ChelseaFirstTeam_15$PlayerAppearences == "-"] <- "0"
ChelseaFirstTeam_15$PlayerAppearences <- as.numeric(ChelseaFirstTeam_15$PlayerAppearences)
ChelseaFirstTeam_15$MarketValue[ChelseaFirstTeam_15$MarketValue == "-"] <- "0"
ChelseaFirstTeam_15$MarketValue <- as.character(ChelseaFirstTeam_15$MarketValue)
#save to csv
write.csv(ChelseaFirstTeam_15, "C:/Users/peter/Desktop/PlayerData/14-15/FirstTeam_14-15.csv")
write.csv(rbind(ChelseaFirstTeam_15, ChelseaFirstTeam_16, ChelseaFirstTeam_17, ChelseaFirstTeam_18, ChelseaFirstTeam_19, ChelseaU23_19, ChelseaU23s_18, ChelseaU23s_17, ChelseaU23_16, ChelseaU23_15), "C:/Users/peter/Desktop/PlayerData/AllPlayers.csv")
write.csv(rbind(ChelseaFirstTeam_15, ChelseaU23_15), "C:/Users/peter/Desktop/PlayerData/14-15/AllPlayers_14-15.csv")
require(rvest)
library(lubridate)
# Web Scraping tutorial
# https://fcrstats.wordpress.com/2018/02/08/introduction-to-scraping-data-from-transfermarkt/
#taking the html page
page <- "https://www.transfermarkt.com/chelsea-fc/leihspielerhistorie/verein/631/plus/1?saison_id=2013&leihe=ist"
#assinging the page
scraped_page <- read_html(page)
#Start date of players loan
LoanStart <- scraped_page %>%html_nodes("td:nth-child(5)") %>% html_text() #%>% as.character()
#End date of players loan
LoanEnd <- scraped_page %>%html_nodes("td:nth-child(6)") %>% html_text() #%>% as.character()
#Name of players
PlayerNamesChels <- scraped_page %>%html_nodes(".spielprofil_tooltip") %>% html_text() #%>% as.character()
#Age
Age <- scraped_page %>%html_nodes("td.zentriert:nth-child(2)") %>% html_text() #%>% as.character()
#Name of club
PlayerLoanClub <- scraped_page %>%html_nodes(".hauptlink .vereinprofil_tooltip") %>% html_text() #%>% as.character()
#image that shows the country that the club is from
LoanClubCountry <- scraped_page %>%html_nodes(".inline-table img.flaggenrahmen")
#Number of appearences made by player
PlayerAppearences <- scraped_page %>%html_nodes("td:nth-child(8)") %>% html_text() #%>% as.character()
#Market Value at the end of loan
MarketValue <- scraped_page %>% html_nodes(".rechts.hauptlink") %>% html_text() #%>% as.character()
#Market value increase/decrease
MarketFluctuation <- scraped_page %>% html_nodes(".hauptlink .icons_sprite") %>% html_text()
#taking the alt text of the Country image html attr.
#https://stackoverflow.com/questions/30693476/web-scraping-of-image
clubCountry <- html_attr(LoanClubCountry, "alt")
#Convert loan dates to date format
#https://stackoverflow.com/questions/53782218/convert-string-dates-to-date-in-r
LoanStart <- format(mdy(LoanStart),"%d/%m/%Y")
LoanEnd <- format(mdy(LoanEnd),"%d/%m/%Y")
#assiging dataframe
ChelseaU23_14 <- data.frame(LoanStart, LoanEnd, PlayerNamesChels, Age, PlayerLoanClub, clubCountry, PlayerAppearences, MarketValue, MarketFluctuation, stringsAsFactors=FALSE)
#converts the "-" sign to a 0
#https://stackoverflow.com/questions/53787049/converting-to-a-0-in-r
ChelseaU23_14$PlayerAppearences[ChelseaU23_14$PlayerAppearences == "-"] <- "0"
ChelseaU23_14$PlayerAppearences <- as.numeric(ChelseaU23_14$PlayerAppearences)
ChelseaU23_14$MarketValue[ChelseaU23_14$MarketValue == "-"] <- "0"
ChelseaU23_14$MarketValue <- as.character(ChelseaU23_14$MarketValue)
#save to csv
write.csv(ChelseaU23_14, "C:/Users/peter/Desktop/PlayerData/13-14/Under23s_13-14.csv")
write.csv(rbind(ChelseaFirstTeam_15, ChelseaFirstTeam_16, ChelseaFirstTeam_17, ChelseaFirstTeam_18, ChelseaFirstTeam_19, ChelseaU23_19, ChelseaU23s_18, ChelseaU23s_17, ChelseaU23_16, ChelseaU23_15, ChelseaU23_14), "C:/Users/peter/Desktop/PlayerData/AllPlayers.csv")
write.csv(rbind(ChelseaU23_14), "C:/Users/peter/Desktop/PlayerData/13-14/AllPlayers_13-14.csv")
require(rvest)
library(lubridate)
# Web Scraping tutorial
# https://fcrstats.wordpress.com/2018/02/08/introduction-to-scraping-data-from-transfermarkt/
#taking the html page
page <- "https://www.transfermarkt.com/chelsea-fc/leihspielerhistorie/verein/631/plus/1?saison_id=2013&leihe=ist"
#assinging the page
scraped_page <- read_html(page)
#Start date of players loan
LoanStart <- scraped_page %>%html_nodes("td:nth-child(5)") %>% html_text() #%>% as.character()
#End date of players loan
LoanEnd <- scraped_page %>%html_nodes("td:nth-child(6)") %>% html_text() #%>% as.character()
#Name of players
PlayerNamesChels <- scraped_page %>%html_nodes(".spielprofil_tooltip") %>% html_text() #%>% as.character()
#Age
Age <- scraped_page %>%html_nodes("td.zentriert:nth-child(2)") %>% html_text() #%>% as.character()
#Name of club
PlayerLoanClub <- scraped_page %>%html_nodes(".hauptlink .vereinprofil_tooltip") %>% html_text() #%>% as.character()
#image that shows the country that the club is from
LoanClubCountry <- scraped_page %>%html_nodes(".inline-table img.flaggenrahmen")
#Number of appearences made by player
PlayerAppearences <- scraped_page %>%html_nodes("td:nth-child(8)") %>% html_text() #%>% as.character()
#Market Value at the end of loan
MarketValue <- scraped_page %>% html_nodes(".rechts.hauptlink") %>% html_text() #%>% as.character()
#Market value increase/decrease
MarketFluctuation <- scraped_page %>% html_nodes(".hauptlink .icons_sprite") %>% html_text()
#taking the alt text of the Country image html attr.
#https://stackoverflow.com/questions/30693476/web-scraping-of-image
clubCountry <- html_attr(LoanClubCountry, "alt")
#Convert loan dates to date format
#https://stackoverflow.com/questions/53782218/convert-string-dates-to-date-in-r
LoanStart <- format(mdy(LoanStart),"%d/%m/%Y")
LoanEnd <- format(mdy(LoanEnd),"%d/%m/%Y")
#assiging dataframe
ChelseaFirstTeam_14 <- data.frame(LoanStart, LoanEnd, PlayerNamesChels, Age, PlayerLoanClub, clubCountry, PlayerAppearences, MarketValue, MarketFluctuation, stringsAsFactors=FALSE)
#converts the "-" sign to a 0
#https://stackoverflow.com/questions/53787049/converting-to-a-0-in-r
ChelseaFirstTeam_14$PlayerAppearences[ChelseaFirstTeam_14$PlayerAppearences == "-"] <- "0"
ChelseaFirstTeam_14$PlayerAppearences <- as.numeric(ChelseaFirstTeam_14$PlayerAppearences)
ChelseaFirstTeam_14$MarketValue[ChelseaFirstTeam_14$MarketValue == "-"] <- "0"
ChelseaFirstTeam_14$MarketValue <- as.character(ChelseaFirstTeam_14$MarketValue)
#save to csv
write.csv(ChelseaFirstTeam_14, "C:/Users/peter/Desktop/PlayerData/13-14/FirstTeam_13-14.csv")
write.csv(rbind(ChelseaFirstTeam_14, ChelseaFirstTeam_15, ChelseaFirstTeam_16, ChelseaFirstTeam_17, ChelseaFirstTeam_18, ChelseaFirstTeam_19, ChelseaU23_19, ChelseaU23s_18, ChelseaU23s_17, ChelseaU23_16, ChelseaU23_15), "C:/Users/peter/Desktop/PlayerData/AllPlayers.csv")
write.csv(rbind(ChelseaFirstTeam_14, ChelseaU23_14), "C:/Users/peter/Desktop/PlayerData/13-14/AllPlayers_13-14.csv")
data("ToothGrowth")
ToothGrowth
data("ToothGrowth")
ToothGrowth
plot( len - supp + dose, data = ToothGrowth)
data("ToothGrowth")
ToothGrowth
plot( len ~ supp + dose, data = ToothGrowth)
data("ToothGrowth")
ToothGrowth
boxplot( len ~ supp + dose, data = ToothGrowth)
par (mfrow=c(2,1))
plot (len ~ supp + dose, data = ToothGrowth)
str(ToothGrowth)
plot (len ~ supp + factor(dose), data = ToothGrowth)
teeth.aov <- aov(len ~ supp * factor(dose), data = ToothGrowth)
summary(teeth.aov)
# install rpart package
install.packages("rpart")
install.packages("rpart.plot")
require(rpart)
require(rpart.plot)
# get data
data(iris)
#inspect it
str(iris) # 4 numerical features, one categorical feature
table(iris$Species)
# we want to predict the categorical feature with some mixture of from the numberical features
# we use classification trees, from the many choices for supervised learning
#####################
# Preprocess the data
#####################
head(iris) # data is too organized
# lets shuffle the data first to make sure the data is 'fair'
set.seed(9850)
g = runif(nrow(iris))
irisr = iris[order(g),]
# check
head(irisr) # we see its shuffled
# lets look at the structure again
str(irisr)
#rpart requires us to put in a linear model function
# rpart(target ~ predictors)
#   target is Species
#   predictors are the numerical attributes
#rpart(Species ~ Sepal.Length + Sepal.Width +  ...)
# or i can write a . to include all remaning attributes as predictors
m3 = rpart(Species ~ ., data=irisr[1:100,], method="class")
m3
# What does the output mean?
# n = 100 tells us that we had 100 instances to learn from
# Legend
# ------
# node: Node number
# split: Which feature it was split on
# n: How many ovservations
# loss: how many misclassifications
# yval (prob): what is the prediction, if you would stop here (in probabilities)
# * denotes terminal node: These are leaf nodes (recall: lecture)
# How many leaf nodes?
# we can draw this
# the cool thing about rpart is that we can draw the diagram much better
rpart.plot(m3) # standard
rpart.plot(m3, type=3, extra=101, fallen.leaves = T)
# this leaves out the dicision nodes and visualizes them differently
# it shows a percentage
# and raw numbers, and the errors
# you can look deeper with summary
summary(m3)
##############################################
# Predict on a new dataset (the remaining set)
# to see how well this model generalizes
##############################################
p3 = predict(m3, irisr[101:150,], type="class")
p3
table(actual = irisr[101:150,5], predicted = p3)
#predicted
#actual       setosa versicolor virginica
#setosa         16          0         0
#versicolor      0         13         2
#virginica       0          2        17
# 4 cases where mis-classified
#    2 versicolors were predicted as virginica
#    2 virginicas were predicted as versicolor
# you can compare it with c5.0!
# reading the data set
credit = read.csv("/Users/itdept/Documents/Teaching/2016-17_Sem2/DWM/_Labs/Lab05/credit.csv")
# lets look at it
str(credit)
# data exploration
table(credit$checking_balance)
summary(credit$months_loan_duration)
summary(credit$amount)
summary(credit$savings_balance)
table(credit$default)
# create a training and a test sub-set
credit
tail(credit)
# randomize first
set.seed(214805) # sync the randomization / allows reproducibility
credit_rand = credit[order(runif(1000)),]
# check if still the same
summary(credit$amount)
summary(credit_rand$amount)
head(credit$amount)
head(credit_rand$amount)
# you can check other parameters, too
# splitting a training and a test dataset out of it
credit_train = credit_rand[1:900,]
credit_test = credit_rand[901:1000,]
# check their distributions
prop.table(table(credit_train$default))
prop.table(table(credit_test$default))
#original
prop.table(table(credit$default))
# small data sets might have some diversion in the data set
# this is based on the size of training and test data set
# and the inherent variation
# install and load the C5.0 library
install.packages("C50")
library("C50")
# train the model
credit_model = C5.0(credit_train[-17], credit_train$default)
summary(credit_model)
# test the model
credit_pred = predict(credit_model, credit_test)
# evaluation
install.packages("gmodels")
library("gmodels")
# CrossTable with all details
CrossTable(credit_test$default, credit_pred)
# CrossTable that is a lot clearer
CrossTable(credit_test$default, credit_pred, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE, dnn =c('actual_default', 'predicted_default'))
##############################################
# boosting to 'hopefully' find a better result
##############################################
# train another model, but this time a series of models
credit_boost10 = C5.0(credit_train[-17], credit_train$default, trials = 10)
credit_boost10
# test the models
credit_boost_predict10 = predict(credit_boost10, credit_test)
# evaluate this now
CrossTable(credit_test$default, credit_boost_predict10, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE, dnn =c('actual_default', 'predicted_default'))
install.packages("gmodels")
library("gmodels")
install.packages("gmodels")
# reading the data set
credit = read.csv("/Users/itdept/Documents/Teaching/2016-17_Sem2/DWM/_Labs/Lab05/credit.csv")
# lets look at it
str(credit)
# data exploration
table(credit$checking_balance)
summary(credit$months_loan_duration)
summary(credit$amount)
summary(credit$savings_balance)
table(credit$default)
# create a training and a test sub-set
credit
tail(credit)
# randomize first
set.seed(214805) # sync the randomization / allows reproducibility
credit_rand = credit[order(runif(1000)),]
# check if still the same
summary(credit$amount)
summary(credit_rand$amount)
head(credit$amount)
head(credit_rand$amount)
# you can check other parameters, too
# splitting a training and a test dataset out of it
credit_train = credit_rand[1:900,]
credit_test = credit_rand[901:1000,]
# check their distributions
prop.table(table(credit_train$default))
prop.table(table(credit_test$default))
#original
prop.table(table(credit$default))
# small data sets might have some diversion in the data set
# this is based on the size of training and test data set
# and the inherent variation
# install and load the C5.0 library
install.packages("C50")
library("C50")
# train the model
credit_model = C5.0(credit_train[-17], credit_train$default)
summary(credit_model)
# test the model
credit_pred = predict(credit_model, credit_test)
# evaluation
install.packages("gmodels")
library("gmodels")
# CrossTable with all details
CrossTable(credit_test$default, credit_pred)
# CrossTable that is a lot clearer
CrossTable(credit_test$default, credit_pred, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE, dnn =c('actual_default', 'predicted_default'))
##############################################
# boosting to 'hopefully' find a better result
##############################################
# train another model, but this time a series of models
credit_boost10 = C5.0(credit_train[-17], credit_train$default, trials = 10)
credit_boost10
# test the models
credit_boost_predict10 = predict(credit_boost10, credit_test)
# evaluate this now
CrossTable(credit_test$default, credit_boost_predict10, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE, dnn =c('actual_default', 'predicted_default'))
require(rvest)
library(lubridate)
# Web Scraping tutorial
# https://fcrstats.wordpress.com/2018/02/08/introduction-to-scraping-data-from-transfermarkt/
#taking the html page
page <- "https://www.transfermarkt.com/chelsea-fc/leihspielerhistorie/verein/631/plus/1?saison_id=2013&leihe=ist"
#assinging the page
scraped_page <- read_html(page)
#Start date of players loan
LoanStart <- scraped_page %>%html_nodes("td:nth-child(5)") %>% html_text() #%>% as.character()
#End date of players loan
LoanEnd <- scraped_page %>%html_nodes("td:nth-child(6)") %>% html_text() #%>% as.character()
#Name of players
PlayerNamesChels <- scraped_page %>%html_nodes(".spielprofil_tooltip") %>% html_text() #%>% as.character()
#Age
Age <- scraped_page %>%html_nodes("td.zentriert:nth-child(2)") %>% html_text() #%>% as.character()
#Name of club
PlayerLoanClub <- scraped_page %>%html_nodes(".hauptlink .vereinprofil_tooltip") %>% html_text() #%>% as.character()
#image that shows the country that the club is from
LoanClubCountry <- scraped_page %>%html_nodes(".inline-table img.flaggenrahmen")
#Number of appearences made by player
PlayerAppearences <- scraped_page %>%html_nodes("td:nth-child(8)") %>% html_text() #%>% as.character()
#Market Value at the end of loan
MarketValue <- scraped_page %>% html_nodes(".rechts.hauptlink") %>% html_text() #%>% as.character()
#Market value increase/decrease
MarketFluctuation <- scraped_page %>% html_nodes(".hauptlink .icons_sprite") %>% html_text()
#taking the alt text of the Country image html attr.
#https://stackoverflow.com/questions/30693476/web-scraping-of-image
clubCountry <- html_attr(LoanClubCountry, "alt")
#Convert loan dates to date format
#https://stackoverflow.com/questions/53782218/convert-string-dates-to-date-in-r
LoanStart <- format(mdy(LoanStart),"%d/%m/%Y")
LoanEnd <- format(mdy(LoanEnd),"%d/%m/%Y")
#assiging dataframe
ChelseaFirstTeam_14 <- data.frame(LoanStart, LoanEnd, PlayerNamesChels, Age, PlayerLoanClub, clubCountry, PlayerAppearences, MarketValue, MarketFluctuation, stringsAsFactors=FALSE)
#converts the "-" sign to a 0
#https://stackoverflow.com/questions/53787049/converting-to-a-0-in-r
ChelseaFirstTeam_14$PlayerAppearences[ChelseaFirstTeam_14$PlayerAppearences == "-"] <- "0"
ChelseaFirstTeam_14$PlayerAppearences <- as.numeric(ChelseaFirstTeam_14$PlayerAppearences)
ChelseaFirstTeam_14$MarketValue[ChelseaFirstTeam_14$MarketValue == "-"] <- "0"
ChelseaFirstTeam_14$MarketValue <- as.character(ChelseaFirstTeam_14$MarketValue)
#save to csv
write.csv(ChelseaFirstTeam_14, "C:/Users/peter/Desktop/PlayerData/13-14/FirstTeam_13-14.csv")
write.csv(rbind(ChelseaFirstTeam_14, ChelseaFirstTeam_15, ChelseaFirstTeam_16, ChelseaFirstTeam_17, ChelseaFirstTeam_18, ChelseaFirstTeam_19, ChelseaU23_19, ChelseaU23s_18, ChelseaU23s_17, ChelseaU23_16, ChelseaU23_15), "C:/Users/peter/Desktop/PlayerData/AllPlayers.csv")
write.csv(rbind(ChelseaFirstTeam_14, ChelseaU23_14), "C:/Users/peter/Desktop/PlayerData/13-14/AllPlayers_13-14.csv")
